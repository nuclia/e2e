[tool.ruff]
# Support Python 3.9+.
target-version = "py39"
line-length = 110
lint.select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "C90", # mccabe
    "F",   # pyflakes
    "I",   # isort
    # "D", # pydocstyle - skip, doesn't seem important for now
    "C4",  # flake8-comprehensions
    "B",   # flake8-bugbear
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "YTT", # flake8-2020
    # "ANN", # flake8-annotations - Skip for now since it's difficult to standardize.
    "S",   # flake8-bandit
    "BLE", # flake8-blind-except
    "FBT", # flake8-boolean-trap
    # "A", # flake8-builtins - skip for now, but interesting to consider in the future.
    "COM", # flake8-commas
    # "DTZ", # flake8-datetimez - skip, doesn't seem important for now
    "T10", # flake8-debugger
    # "DJ",  # flake8-django - we don't use django
    "EM",  # flake8-errmsg
    "EXE", # flake8-executable
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "G",   # flake8-logging-format
    "INP", # flake8-no-pep420
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PYI", # flake8-pyi
    "PT",  # flake8-pytest-style
    "Q",   # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # flake8-self
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "INT", # flake8-gettext
    # "ARG", # flake8-unused-arguments - causes more trouble then value
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    # "PD",  # pandas-vet - pandas not used
    "PGH", # pygrep-hooks
    "PL",  # pylint
    "TRY", # tryceratops
    # "NPY", # NumPy-specific rules - we don't currently use numpy
    "RUF", # Ruff-specific rules
]

lint.ignore = [
    "B008",   # do not perform function calls in argument defaults
    "PT007",  # pytest row should also be able to use pytest.param values
    "FBT003", # sometimes 3rd parties introduce boolean traps and we need to adjust
    "TRY301", # more trouble then value.
    "SIM105", # to allow try except pass isntead of using contextlib.suppress

    # When using Ruff as a formatter, it is recommended to avoid the following lint rules:
    "W191", # tab-indentation
    "E111", # indentation-with-invalid-multiple
    "E114", # indentation-with-invalid-multiple-comment ()
    "E117", # over-indented ()
    "D206", # indent-with-spaces ()
    "D300", # triple-single-quotes ()
    "Q000", # bad-quotes-inline-string ()
    "Q001", # bad-quotes-multiline-string ()
    "Q002", # bad-quotes-docstring ()
    "Q003", # avoidable-escaped-quote ()
    "COM812", # missing-trailing-comma ()
    "COM819", #prohibited-trailing-comma ()
    "ISC001", # single-line-implicit-string-concatenation ()
    "ISC002", # multi-line-implicit-string-concatenation ()

    # TODO: Remove these rules from ignore list after fixing them
    "PGH004", # Use specific rule codes when using `noqa`
    "PT003", # scope=function is implied in `@pytest.fixture()`
    "B006", # Do not use mutable data structures for argument defaults"
    "BLE001", # Do not catch blind exception: `Exception`
    "TRY003", # Avoid specifying long messages outside the exception class
    "TRY002", # Create your own exception
    "EM102", # Exception must not use an f-string literal, assign to variable first
    "PTH", # Ignore path library recommendations
    "ERA001", # Found commented-out code
    "S113", # Probable use of requests call without timeout
    "PLR2004", # Magic value used in comparison, ...
    "PLR0913", # Too many arguments ignored
    "PLR0915", # Too many statements ignored
    "N818", # Exception name
    "SIM117", # Use a single `with` statement with multiple contexts instead of nested `with` statements
    "FBT001", # Boolean-typed positional argument in function definition"
    "FBT002", # Boolean-typed positional argument in function definition"
    "PLW0603", # Using the global statement to update `X` is discouraged
    "E721", # Do not compare types, use `isinstance()`
    "E501", # Line too long
    "PLR0912", # Too many branches
    "C901", # Code is too complex
    "PGH003", # Use specific rule codes when ignoring type issues
    "B904", # exceptions things
    "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
    "N805", # First argument of a method should be named `self`
    "N802", # Function name `Chat` should be lowercase
    "N803", # Argument name `backupCount` should be lowercase
    "SLF001", # Private member accessed
    "PYI036",
    "N801", # Class name `X` should use CapWords convention
    "N816", # Variable `X` in global scope should not be mixedCase
    "G004", # Logging statement uses f-string
    "UP006", # Use `dict` instead of `Dict` for type annotation
    "UP035", # `typing.List` is deprecated, use `list` instead
    "SIM401", # Use `x.get("y", z)` instead of an `if` block
    "PT023",  # Use `@pytest.mark.asyncio()` over `@pytest.mark.asyncio`
    "F541", # f-string without any placeholders
    "PT022", # No teardown in fixture `nats_consumer_factory`, use `return` instead of `yield`
    "INP001", # add __init__.py
    "RET505", # Unnecessary `else` after `return` statement
    "TC002", # Move third-party import `X` into a type-checking block
    "SIM115", # Use context handler for opening files
    "C408", # Unnecessary `dict` call (rewrite as a literal)
    "PT024", # `pytest.mark.asyncio` is unnecessary for fixtures
    "C417", # Unnecessary `map` usage
    "S104", # Possible binding to all interfaces
    "UP026", # `mock` is deprecated, use `unittest.mock`
    "UP031", # Use format specifiers instead of percent format
    "TRY201", # Use `raise` without specifying exception name
    "TRY203", # Remove exception handler; error is immediately re-raised
    "B011", # Do not `assert False` (`python -O` removes these calls), raise `AssertionError()`
    "PT015", # Assertion always fails, replace with `pytest.fail()`
    "E722", # Do not use bare `except`
    "SIM300", # Yoda conditions are discouraged, use `data2 == "a response"` instead
    "UP032", # Use f-string instead of `format` call
    "SIM118", # Use `key not in dict` instead of `key not in dict.keys()`
    "PT001", # Use `@pytest.fixture()` over `@pytest.fixture`
    "TRY300", # Consider moving this statement to an `else` block
    "SIM102", # Use a single `if` statement instead of nested `if` statements
    "UP004", # Class `Gnatsd` inherits from `object`
    "EM101", # Exception must not use a string literal, assign to variable first
    "RUF010", # Use explicit conversion flag
    "RSE102", # Unnecessary parentheses on raised exception
    "RUF100", # Unused blanket `noqa` directive
    "S324", # Probable use of insecure hash functions in `hashlib`: `md5`
    "RUF013", # PEP 484 prohibits implicit `Optional`
    "SIM108", # Use ternary operator `bucket = self.bucket if self.field is None else self.field.bucket_name` instead of `if`-`else`-block
    "S101", # Use of `assert` detected
    "RET504", # Unnecessary assignment to `deleted` before `return` statement
    "RET506", # Unnecessary `else` after `raise` statement
    "TC003", # Move standard library import `concurrent.futures.ThreadPoolExecutor` into a type-checking block
    "UP009", # UTF-8 encoding declaration is unnecessary
    "S110", # `try`-`except`-`pass` detected, consider logging the exception
    "RET503", # Missing explicit `return` at the end of function able to return non-`None` value
    "PLW2901", # `for` loop variable `value` overwritten by assignment target
    "TID252", # Prefer absolute imports over relative imports
    "PLC0414", # Import alias does not rename original package
    "S301", # `pickle` and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue
    "F841", # Local variable `info_account_user_id` is assigned to but never used
    "T201", #`print` found
    "UP007", # Use `X | Y` for type annotations
    "PLR1714", # Consider merging multiple comparisons
    "B007", # Loop control variable `idx` not used within loop body
    "SIM110", # Use `return any(scope in conn.auth.scopes for scope in scopes)` instead of `for` loop
    "W291", # Trailing whitespace
    "SIM113", # Use `enumerate()` for index variable `count` in `for` loop
    "RET502", # Do not implicitly `return None` in function able to return non-`None` value
    "UP030", # Use implicit references for positional format fields
    "RUF015", # Prefer `next(iter(mock_aiohttp.requests.values()))` over single element slice
    "SIM114", # Combine `if` branches using logical `or` operator
    "PT018", # Assertion should be broken down into multiple parts
    "RUF005", # Consider `[key, *values, str(int(time.time() // ttl))]` instead of concatenation
    "UP039", # Unnecessary parentheses after class definition
    "C416", # Unnecessary `list` comprehension (rewrite using `list()`)
    "S105", # Possible hardcoded password assigned to: "TOKEN"
    "PLR0911", # Too many return statements (7 > 6)
    "B009", # Do not call `getattr` with a constant attribute value.
    "PT017", # Found assertion on exception `r` in `except` block, use `pytest.raises()` instead
    "TC001", # Move application import `stashify_idp.authorizer.db.IDPRegionalDatabaseUtility` into a type-checking block
    "C401", # Unnecessary generator (rewrite as a `set` comprehension)
    "UP015", # Unnecessary open mode parameters
    "B023", # Function definition does not bind loop variable `assets`
    "C403", # Unnecessary `list` comprehension (rewrite as a `set` comprehension)
    "C419", # Unnecessary list comprehension
    "PLR0402", # [*] Use `from nuclia_accounting import tables` in lieu of alias
    "RUF002", # Docstring contains ambiguous `â€™` (RIGHT SINGLE QUOTATION MARK). Did you mean ``` (GRAVE ACCENT)?
    "N806", # Variable `rolloverAt` in function should be lowercase
    "PLR0402", # [*] Use `from nuclia_external_auth import oauth` in lieu of alias
    "B026", # Star-arg unpacking after a keyword argument is strongly discouraged
    "PLR1711", # Useless `return` statement at end of function
    "SIM910", # Use `dict.get()` without default value
    "F601", # Dictionary key literal `"resources_processed"` repeated
]

exclude = [ 
    ".git",
]


[tool.ruff.lint.isort]
case-sensitive = false
no-sections = true
force-single-line = true # Recommended to remove
order-by-type = false
force-sort-within-sections = false
from-first = true
lines-between-types = 1

[tool.ruff.lint.per-file-ignores]
"**/tests/**" = [
    "ARG", # Unused function args -> fixtures nevertheless are functionally relevant...
    "FBT", # Don't care about booleans as positional arguments in tests, e.g. via @pytest.mark.parametrize()
    "SLF001", # Private member accessed
    "S", # asserts allowed in tests...

    # TODO: Remove these rules from ignore list after fixing them
    "PT006", # Wrong name(s) type in `@pytest.mark.parametrize`
    "RUF001", # String contains ambiguous symbol
]
"**/__init__.py" = ["PLC0414",]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true
